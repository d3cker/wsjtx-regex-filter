name: Build release packages
on:
  push:
    tags:
      - '**'
    branches-ignore:
      - '**'

jobs:
  download_wsjtx:
    runs-on: ubuntu-latest
    steps:
      - name: Downlaod source code
        run: wget https://physics.princeton.edu/pulsar/k1jt/wsjtx-2.5.4.tgz

      - name: Save WSJTX for next jobs
        uses: actions/upload-artifact@v2
        with:
          name: wsjtx-source-code
          path: wsjtx-2.5.4.tgz


  patch_source:
    needs: ['download_wsjtx']
    runs-on: ubuntu-latest
    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: wsjtx-source-code

      - name: Unpack the source
        run: mkdir unpack && pwd && ls -l && tar -xzvf wsjtx-2.5.4.tgz -C unpack/

      - name: Prepare source
        run: mkdir newsrc && tar -xzvf unpack/wsjtx-2.5.4/src/wsjtx.tgz -C newsrc/

      - name: Patch WSJTX
        run: cp -R patch/* newsrc/wsjtx/

      - name: Repack source
        run: cd newsrc/ && tar -czvf wsjtx.tgz * && cd ..

      - name: Copy package
        run: cp newsrc/wsjtx.tgz unpack/wsjtx-2.5.4/src/

      - name: Generate md5sum
        run: cd unpack/wsjtx-2.5.4/src/ && md5sum wsjtx.tgz > wsjtx.tgz.md5sum

      - name: Create new archive
        run: cd unpack/ && tar -czvf wsjtx-patched-2.5.4.tgz *

      - name: Upload new patched archive
        uses: actions/upload-artifact@v2
        with:
          name: wsjtx-patched-code
          path: unpack/wsjtx-patched-2.5.4.tgz

  build_rpi32:
    needs: ['patch_source']
    runs-on: ARM
    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: wsjtx-patched-code

      - name: Prepare environment
        run: tar -xzvf wsjtx-patched-2.5.4.tgz && mkdir build

      - name: Prepare Makefile
        run: cd build && cmake -DWSJT_SKIP_MANPAGES=ON -DWSJT_GENERATE_DOCS=OFF ../wsjtx-2.5.4
      
      - name: Compile binaray and create package
        run: cd build && cmake --build . --target package -- -j3

      - name: Upload new patched archive
        uses: actions/upload-artifact@v2
        with:
          name: wsjtx-rpi32-package
          path: build/wsjtx-prefix/src/wsjtx-build/wsjtx_2.5.4_armhf.deb

  build_rpi64:
    needs: ['patch_source']
    runs-on: ARM64
    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: wsjtx-patched-code

      - name: Prepare environment
        run: tar -xzvf wsjtx-patched-2.5.4.tgz && mkdir build

      - name: Prepare Makefile
        run: cd build && cmake -DWSJT_SKIP_MANPAGES=ON -DWSJT_GENERATE_DOCS=OFF ../wsjtx-2.5.4
      
      - name: Compile binaray and create package
        run: cd build && cmake --build . --target package -- -j3

      - name: Upload new patched archive
        uses: actions/upload-artifact@v2
        with:
          name: wsjtx-rpi64-package
          path: build/wsjtx-prefix/src/wsjtx-build/wsjtx_2.5.4_arm64.deb

  build_focal:
    needs: ['patch_source']
    runs-on: ubuntu-latest
    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: wsjtx-patched-code

      - name: Create Docker Image
        run: cd $GITHUB_WORKSPACE/docker/ubuntu_focal && docker build . --tag ubuntu_focal_build

      - name: Run Container
        run: docker run -t -v $GITHUB_WORKSPACE:/build -w /build ubuntu_focal_build /build/docker/ubuntu_focal/build.sh

      - name: Upload new patched archive
        uses: actions/upload-artifact@v2
        with:
          name: wsjtx-focal-package
          path: wsjtx_2.5.4_focal_amd64.deb

  build_jammy:
    needs: ['patch_source']
    runs-on: ubuntu-latest
    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: wsjtx-patched-code

      - name: Create Docker Image
        run: cd $GITHUB_WORKSPACE/docker/ubuntu_jammy && docker build . --tag ubuntu_jammy_build

      - name: Run Container
        run: docker run -t -v $GITHUB_WORKSPACE:/build -w /build ubuntu_jammy_build /build/docker/ubuntu_jammy/build.sh

      - name: Upload new patched archive
        uses: actions/upload-artifact@v2
        with:
          name: wsjtx-jammy-package
          path: wsjtx_2.5.4_jammy_amd64.deb


  release_draft:
    needs: ['build_focal' , 'build_jammy' , 'build_rpi32' , 'build_rpi64']
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Release draft
        uses: actions/create-release@v1
        id: create_release_draft
        with:
          draft: false
          prerelease: false
          release_name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref }}
          body: |
            Release build.
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: upload focal artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release_draft.outputs.upload_url }}
          asset_path: wsjtx-focal-package/wsjtx_2.5.4_focal_amd64.deb
          asset_name: wsjtx_2.5.4_focal_amd64.deb
          asset_content_type: application/gzip

      - name: upload jammy artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release_draft.outputs.upload_url }}
          asset_path: wsjtx-jammy-package/wsjtx_2.5.4_jammy_amd64.deb
          asset_name: wsjtx_2.5.4_jammy_amd64.deb
          asset_content_type: application/gzip

      - name: upload rpi32 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release_draft.outputs.upload_url }}
          asset_path: wsjtx-rpi32-package/wsjtx_2.5.4_armhf.deb
          asset_name: wsjtx_2.5.4_armhf.deb
          asset_content_type: application/gzip

      - name: upload rpi64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release_draft.outputs.upload_url }}
          asset_path: wsjtx-rpi32-package/wsjtx_2.5.4_arm64.deb
          asset_name: wsjtx_2.5.4_arm64.deb
          asset_content_type: application/gzip


      - name: upload patched source code
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release_draft.outputs.upload_url }}
          asset_path: wsjtx-patched-code/wsjtx-patched-2.5.4.tgz
          asset_name: wsjtx-patched-2.5.4.tgz
          asset_content_type: application/gzip


  clean_artifacts:
    needs: ['release_draft']
    runs-on: ubuntu-latest
    steps:
      - name: Delete Artifact
        uses: GeekyEggo/delete-artifact@v1.0.0
        with:
          name: |
            wsjtx-patched-code
            wsjtx-source-code
            wsjtx-focal-package
            wsjtx-jammy-package
            wsjtx-rpi32-package
            wsjtx-rpi64-package
